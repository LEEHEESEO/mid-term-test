// 자료구조 존넨쉬름
// this code is made to implemet Stack. 
// Stack 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STACK 100

typedef enum { false, true } bool;
typedef int Data;
typedef struct
{
    Data item[MAX_STACK];
    int top;
}Stack;

void InitStack(Stack* pstack);
bool IsFull(Stack* pstack);
bool IsEmpty(Stack* psatck);
Data Peek(Stack* pstack);
void Push(Stack* pstack);
void Pop(Stack* psatck);

void InitStack(Stack* pstack)
{
    pstack->top = -1;
}

bool IsFull(Stack* pstack)
{
    return pstack->top == MAX_STACK - 1;
}

bool IsEmpty(Stack* pstack)
{
    return pstack->top == -1;
}

Data Peek(Stack* pstack)
{
    if (IsEmpty(pstack)) exit(1);
    return pstack->item[pstack -> top];
}

void Push(Stack* pstack, Data item)
{
    if (IsFull(pstack)) exit(1);
    pstack->item[++pstack->top] = item;
}

void Pop(Stack* pstack)
{
    if (IsEmpty(pstack)) exit(1);
    --(pstack->top);
}


void ReversePrint(char* s, int len)
{
    Stack stack;
    char ch;

    InitStack(&stack);

    for (int i = 0; i < len; i++)
    {
        Push(&stack, s[i]);
    }

    while (!IsEmpty(&stack))
    {
        ch = Peek(&stack);
        printf("%c", ch);
        Pop(&stack);
    }
}

bool IsParanbBalanced(char* exp, int len)
{
    Stack stack;
    InitStack(&stack);
    
    for (int i = 0; i < len; i++)
    {
        if (exp[i] == '(')        Push(&stack, exp[i]);
        else if (exp[i] == ')')
        {
            if (IsEmpty(&stack))    return false;
            else Pop(&stack);
        }
    }
    if (IsEmpty(&stack))    return true;
    else return false;
}

int main()
{
   
}
